# Staging Environment Configuration for Omni
apiVersion: v1
kind: ConfigMap
metadata:
  name: omni-staging-config
  namespace: omni-staging
data:
  # Environment-specific settings
  environment: "staging"
  log_level: "debug"
  metrics_enabled: "true"
  telemetry_endpoint: "https://staging-telemetry.omni.dev"
  
  # Package Manager Test Matrix
  test_environments: |
    ubuntu_2004:
      package_managers: ["apt", "snap", "flatpak"]
      docker_image: "ubuntu:20.04"
      test_packages: ["curl", "vim", "git"]
    
    ubuntu_2204: 
      package_managers: ["apt", "snap", "flatpak"]
      docker_image: "ubuntu:22.04"
      test_packages: ["curl", "vim", "git", "htop"]
    
    fedora_38:
      package_managers: ["dnf", "flatpak"]
      docker_image: "fedora:38"
      test_packages: ["curl", "vim", "git"]
    
    arch_latest:
      package_managers: ["pacman"]
      docker_image: "archlinux:latest"
      test_packages: ["curl", "vim", "git"]
    
    opensuse_leap:
      package_managers: ["zypper"]
      docker_image: "opensuse/leap:15.5"
      test_packages: ["curl", "vim", "git"]
    
    macos_ventura:
      package_managers: ["brew"]
      runner: "macos-13"
      test_packages: ["curl", "vim", "git"]
    
    macos_sonoma:
      package_managers: ["brew"]
      runner: "macos-14"
      test_packages: ["curl", "vim", "git"]
    
    windows_2019:
      package_managers: ["winget", "chocolatey", "scoop"]
      runner: "windows-2019" 
      test_packages: ["curl", "vim", "git"]
    
    windows_2022:
      package_managers: ["winget", "chocolatey", "scoop"]
      runner: "windows-2022"
      test_packages: ["curl", "vim", "git"]

  # Test Scenarios
  test_scenarios: |
    smoke_tests:
      - command: "omni --version"
        expected_exit_code: 0
      - command: "omni --help"
        expected_exit_code: 0
      - command: "omni config show"
        expected_exit_code: 0
    
    basic_functionality:
      - command: "omni --mock search firefox"
        expected_exit_code: 0
        expected_output_contains: ["firefox", "Found"]
      - command: "omni --mock install curl"
        expected_exit_code: 0
        expected_output_contains: ["curl", "installed", "mock"]
      - command: "omni --mock history show"
        expected_exit_code: 0
    
    version_tier_tests:
      lite:
        - command: "omni --mock install vim"
          expected_exit_code: 0
        - command: "omni --mock search editor"
          expected_exit_code: 0
      
      core:
        - command: "omni --mock snapshot create test-snapshot"
          expected_exit_code: 0
        - command: "omni --mock manifest install tests/data/test_manifest.yaml"
          expected_exit_code: 0
        - command: "omni --mock snapshot list"
          expected_exit_code: 0
          expected_output_contains: ["test-snapshot"]
      
      enterprise:
        - command: "omni gui --version"
          expected_exit_code: 0
        - command: "omni --mock transaction begin"
          expected_exit_code: 0
        - command: "omni --mock ssh-install user@testhost vim"
          expected_exit_code: 0

  # Performance Benchmarks
  performance_thresholds: |
    startup_time_ms: 500
    search_time_ms: 2000
    install_simulation_ms: 1000
    memory_usage_mb: 50
    cpu_usage_percent: 10

  # Canary Deployment Configuration
  canary_config: |
    rollout_strategy: "blue_green"
    canary_percentage: 10
    success_criteria:
      error_rate_threshold: 0.01
      response_time_p95_ms: 3000
      minimum_test_duration_minutes: 30
    
    test_users:
      - "dev-team@company.com"
      - "qa-team@company.com"
      - "beta-testers@company.com"
    
    rollback_triggers:
      - crash_rate > 0.1%
      - error_rate > 1%
      - user_complaints > 5
      - memory_leak_detected: true

---
apiVersion: v1
kind: Secret
metadata:
  name: omni-staging-secrets
  namespace: omni-staging
type: Opaque
data:
  # Base64 encoded values
  github_token: ""  # Set via CI/CD
  docker_registry_token: ""  # Set via CI/CD
  telemetry_api_key: ""  # Set via CI/CD