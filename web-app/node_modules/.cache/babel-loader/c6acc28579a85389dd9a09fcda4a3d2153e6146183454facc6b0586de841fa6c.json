{"ast":null,"code":"import DOMPurify from'dompurify';/**\n * Validates if a URL is safe for use in img src attributes\n * @param {string} url - The URL to validate\n * @returns {boolean} - Whether the URL is valid and safe\n */export const isValidUrl=url=>{if(!url||typeof url!=='string')return false;try{const parsed=new URL(url);// Only allow HTTP/HTTPS protocols\nreturn['http:','https:'].includes(parsed.protocol);}catch(_unused){return false;}};/**\n * Validates if a display name contains only safe characters\n * @param {string} name - The display name to validate\n * @returns {boolean} - Whether the name is valid\n */export const isValidDisplayName=name=>{if(!name||typeof name!=='string')return false;// Only allow alphanumeric, spaces, and safe punctuation\nconst safePattern=/^[a-zA-Z0-9\\s\\-_.]{1,50}$/;return safePattern.test(name);};/**\n * Gets a safe avatar URL with fallback to default\n * @param {string} avatarUrl - The user's avatar URL\n * @returns {string} - Safe avatar URL or default\n */export const getSafeAvatarUrl=avatarUrl=>{// Validate URL format and protocol\nif(!avatarUrl||!isValidUrl(avatarUrl)){return'/default-avatar.png';// Fallback to default\n}// Only allow specific trusted domains for avatars\nconst allowedDomains=['https://avatars.githubusercontent.com','https://secure.gravatar.com','https://cdn.discordapp.com','https://images.unsplash.com'];const isAllowedDomain=allowedDomains.some(domain=>avatarUrl.startsWith(domain));return isAllowedDomain?avatarUrl:'/default-avatar.png';};/**\n * Sanitizes display name to prevent XSS\n * @param {string} displayName - The user's display name\n * @returns {string} - Sanitized display name\n */export const getSafeDisplayName=displayName=>{if(!displayName||typeof displayName!=='string'){return'Anonymous User';}// Sanitize HTML and limit length\nconst sanitized=DOMPurify.sanitize(displayName,{ALLOWED_TAGS:[],// No HTML tags allowed\nALLOWED_ATTR:[]// No attributes allowed\n});// If sanitization removed all content, use fallback\nconst result=sanitized.trim();if(!result){return'Anonymous User';}return result.substring(0,50);// Limit length\n};/**\n * Escapes HTML entities in text\n * @param {string} text - Text to escape\n * @returns {string} - HTML-escaped text\n */export const escapeHtml=text=>{if(!text||typeof text!=='string')return'';return text.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/\"/g,'&quot;').replace(/'/g,'&#x27;');};/**\n * Sanitizes user-generated content for safe display\n * @param {string} content - User content to sanitize\n * @returns {string} - Sanitized content\n */export const sanitizeUserContent=content=>{if(!content||typeof content!=='string')return'';return DOMPurify.sanitize(content,{ALLOWED_TAGS:['p','br','strong','em','u'],ALLOWED_ATTR:[]});};/**\n * Validates if a website URL is safe\n * @param {string} url - The website URL to validate\n * @returns {boolean} - Whether the URL is valid and safe\n */export const isValidWebsite=url=>{if(!url||typeof url!=='string')return false;try{const parsed=new URL(url);// Only allow HTTP/HTTPS protocols\nif(!['http:','https:'].includes(parsed.protocol))return false;// Block suspicious domains and IPs\nconst hostname=parsed.hostname.toLowerCase();// Block localhost variants\nif(hostname==='localhost'||hostname==='127.0.0.1'||hostname==='0.0.0.0')return false;// Block IPv6 localhost\nif(hostname==='[::1]'||hostname==='::1')return false;// Block private IP ranges\nif(hostname.match(/^(10\\.|172\\.(1[6-9]|2[0-9]|3[01])\\.|192\\.168\\.)/))return false;return true;}catch(_unused2){return false;}};/**\n * Gets a safe website URL or returns empty string\n * @param {string} websiteUrl - The website URL to validate\n * @returns {string} - Safe website URL or empty string\n */export const getSafeWebsiteUrl=websiteUrl=>{if(!websiteUrl||typeof websiteUrl!=='string')return'';// Handle malformed URLs by trying to parse them\ntry{// Try to construct a valid URL if it's malformed\nlet normalizedUrl=websiteUrl.trim();// Check for obviously malformed patterns\nif(normalizedUrl.includes('://')&&(normalizedUrl.endsWith('.')||normalizedUrl.includes('..'))){return'';}return isValidWebsite(normalizedUrl)?normalizedUrl:'';}catch(_unused3){return'';}};","map":{"version":3,"names":["DOMPurify","isValidUrl","url","parsed","URL","includes","protocol","_unused","isValidDisplayName","name","safePattern","test","getSafeAvatarUrl","avatarUrl","allowedDomains","isAllowedDomain","some","domain","startsWith","getSafeDisplayName","displayName","sanitized","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","result","trim","substring","escapeHtml","text","replace","sanitizeUserContent","content","isValidWebsite","hostname","toLowerCase","match","_unused2","getSafeWebsiteUrl","websiteUrl","normalizedUrl","endsWith","_unused3"],"sources":["/home/user/omni/web-app/src/utils/validation.js"],"sourcesContent":["import DOMPurify from 'dompurify';\n\n/**\n * Validates if a URL is safe for use in img src attributes\n * @param {string} url - The URL to validate\n * @returns {boolean} - Whether the URL is valid and safe\n */\nexport const isValidUrl = (url) => {\n  if (!url || typeof url !== 'string') return false;\n  \n  try {\n    const parsed = new URL(url);\n    // Only allow HTTP/HTTPS protocols\n    return ['http:', 'https:'].includes(parsed.protocol);\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Validates if a display name contains only safe characters\n * @param {string} name - The display name to validate\n * @returns {boolean} - Whether the name is valid\n */\nexport const isValidDisplayName = (name) => {\n  if (!name || typeof name !== 'string') return false;\n  \n  // Only allow alphanumeric, spaces, and safe punctuation\n  const safePattern = /^[a-zA-Z0-9\\s\\-_.]{1,50}$/;\n  return safePattern.test(name);\n};\n\n/**\n * Gets a safe avatar URL with fallback to default\n * @param {string} avatarUrl - The user's avatar URL\n * @returns {string} - Safe avatar URL or default\n */\nexport const getSafeAvatarUrl = (avatarUrl) => {\n  // Validate URL format and protocol\n  if (!avatarUrl || !isValidUrl(avatarUrl)) {\n    return '/default-avatar.png'; // Fallback to default\n  }\n  \n  // Only allow specific trusted domains for avatars\n  const allowedDomains = [\n    'https://avatars.githubusercontent.com',\n    'https://secure.gravatar.com',\n    'https://cdn.discordapp.com',\n    'https://images.unsplash.com'\n  ];\n  \n  const isAllowedDomain = allowedDomains.some(domain => \n    avatarUrl.startsWith(domain)\n  );\n  \n  return isAllowedDomain ? avatarUrl : '/default-avatar.png';\n};\n\n/**\n * Sanitizes display name to prevent XSS\n * @param {string} displayName - The user's display name\n * @returns {string} - Sanitized display name\n */\nexport const getSafeDisplayName = (displayName) => {\n  if (!displayName || typeof displayName !== 'string') {\n    return 'Anonymous User';\n  }\n  \n  // Sanitize HTML and limit length\n  const sanitized = DOMPurify.sanitize(displayName, { \n    ALLOWED_TAGS: [],  // No HTML tags allowed\n    ALLOWED_ATTR: []   // No attributes allowed\n  });\n  \n  // If sanitization removed all content, use fallback\n  const result = sanitized.trim();\n  if (!result) {\n    return 'Anonymous User';\n  }\n  \n  return result.substring(0, 50); // Limit length\n};\n\n/**\n * Escapes HTML entities in text\n * @param {string} text - Text to escape\n * @returns {string} - HTML-escaped text\n */\nexport const escapeHtml = (text) => {\n  if (!text || typeof text !== 'string') return '';\n  \n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;');\n};\n\n/**\n * Sanitizes user-generated content for safe display\n * @param {string} content - User content to sanitize\n * @returns {string} - Sanitized content\n */\nexport const sanitizeUserContent = (content) => {\n  if (!content || typeof content !== 'string') return '';\n  \n  return DOMPurify.sanitize(content, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'u'],\n    ALLOWED_ATTR: []\n  });\n};\n\n/**\n * Validates if a website URL is safe\n * @param {string} url - The website URL to validate\n * @returns {boolean} - Whether the URL is valid and safe\n */\nexport const isValidWebsite = (url) => {\n  if (!url || typeof url !== 'string') return false;\n  \n  try {\n    const parsed = new URL(url);\n    // Only allow HTTP/HTTPS protocols\n    if (!['http:', 'https:'].includes(parsed.protocol)) return false;\n    \n    // Block suspicious domains and IPs\n    const hostname = parsed.hostname.toLowerCase();\n    \n    // Block localhost variants\n    if (hostname === 'localhost' || hostname === '127.0.0.1' || hostname === '0.0.0.0') return false;\n    \n    // Block IPv6 localhost\n    if (hostname === '[::1]' || hostname === '::1') return false;\n    \n    // Block private IP ranges\n    if (hostname.match(/^(10\\.|172\\.(1[6-9]|2[0-9]|3[01])\\.|192\\.168\\.)/)) return false;\n    \n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Gets a safe website URL or returns empty string\n * @param {string} websiteUrl - The website URL to validate\n * @returns {string} - Safe website URL or empty string\n */\nexport const getSafeWebsiteUrl = (websiteUrl) => {\n  if (!websiteUrl || typeof websiteUrl !== 'string') return '';\n  \n  // Handle malformed URLs by trying to parse them\n  try {\n    // Try to construct a valid URL if it's malformed\n    let normalizedUrl = websiteUrl.trim();\n    \n    // Check for obviously malformed patterns\n    if (normalizedUrl.includes('://') && (normalizedUrl.endsWith('.') || normalizedUrl.includes('..'))) {\n      return '';\n    }\n    \n    return isValidWebsite(normalizedUrl) ? normalizedUrl : '';\n  } catch {\n    return '';\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}